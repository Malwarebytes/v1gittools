require 'yaml'
require 'git'
require 'v1gittools/deep_hash_with_indifferent_access'

module V1gittools
  @config = nil
  def self.config
    if @config.nil?
      # load config from file
      V1gittools::load_config_file
    end

    @config
  end

  def self.load_config_file filename=nil
    filename = '~/.v1git.conf' if filename.nil?
    filename = File.expand_path(filename)
    unless File.exists?(filename)
      raise "Config file #{filename} must exist and be properly configured before running this tool! Please refer to v1git.conf.example."
    end

    @config = DeepHashWithIndifferentAccess.convert_hash(YAML::load(File.open(filename)))
  end

  @repo_config = nil
  def self.repo_config
    if @repo_config.nil?
      V1gittools::load_repo_config
    end

    @repo_config
  end

  @repo_config_path = nil
  def self.repo_config_path
    if @repo_config_path.nil?
      git_root_path = `git rev-parse --show-toplevel`.strip
      raise git_root_path if $?.to_i != 0
      @repo_config_path = git_root_path + '/.git/v1git.conf'
    end

    @repo_config_path
  end

  def self.load_repo_config
    config_path = V1gittools::repo_config_path

    unless File.exists?(config_path)
      V1gittools::generate_repo_config config_path
    end

    @repo_config = DeepHashWithIndifferentAccess.convert_hash(YAML::load(File.open(config_path)))
  end

  def self.generate_repo_config config_path
    puts "NOTICE: v1git has never been used for this project before. Generating default config...\n\n"

    # guessing github address from git remote origin url
    git_remote_url = `git config --get remote.origin.url`.strip

    if git_remote_url.start_with?('http')
      # http connection is easy!
      github_url=git_remote_url.chomp('.git')

    elsif git_remote_url.start_with?('git')
      github_host, github_project_uri = git_remote_url.match(/git@(.+?):(.+?)\.git/).captures
      github_url = "https://#{github_host}/#{github_project_uri}"
    else
      github_url=''
    end

    default_config_hash = { github_url: github_url, develop_branch: 'develop', branches: {} }

    V1gittools::write_repo_config(config_path,default_config_hash)

    if github_url == ''
      raise "ERROR: Couldn't guess repository github url. Please modify git_remote_url config option manually in '#{config_path}'"
    else
      puts "Config generated with the following guessed/assumed values:\n\n"
      puts "Develop branch: #{default_config_hash[:develop_branch]}"
      puts "github_url: #{github_url}\n\n"
      puts "If these values are not correct, please correct it in \"#{config_path}\".\n\n"
    end
  end

  def self.update_repo_config
    V1gittools::write_repo_config(V1gittools::repo_config_path, @repo_config)
  end

  def self.write_repo_config config_path, config_hash
    File.open(config_path,'w') do |f|
      f.write("# This file is autogenerated and updated by v1git! Comments and formatting will be lost!\n\n")
      f.write(config_hash.to_yaml)
    end
  end
end